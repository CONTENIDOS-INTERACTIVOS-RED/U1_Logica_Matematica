{"remainingRequest":"/home/runner/work/U1_Logica_Matematica/U1_Logica_Matematica/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/runner/work/U1_Logica_Matematica/U1_Logica_Matematica/src/views/curso/Tema2.vue?vue&type=template&id=18e8575f&lang=pug&","dependencies":[{"path":"/home/runner/work/U1_Logica_Matematica/U1_Logica_Matematica/src/views/curso/Tema2.vue","mtime":1735421243682},{"path":"/home/runner/work/U1_Logica_Matematica/U1_Logica_Matematica/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/runner/work/U1_Logica_Matematica/U1_Logica_Matematica/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/home/runner/work/U1_Logica_Matematica/U1_Logica_Matematica/node_modules/pug-plain-loader/index.js","mtime":499162500000},{"path":"/home/runner/work/U1_Logica_Matematica/U1_Logica_Matematica/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/runner/work/U1_Logica_Matematica/U1_Logica_Matematica/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}